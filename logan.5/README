AUTHOR: Logan Pettit
HOW TO RUN: This program can be ran by typing make to create the executables oss and userProces. You will then type ./oss to run the program which will call upon userProcess to perform various tasks.

DESCRIPTION: This project deals with resource and deadlock managment. The project starts by launching processes that will allocate random amounts of resources to themselves using a resource descriptor to keep track. The processes then will generate some amount of requests based on how many resources there were originally. Once the resources and requests have been set up a process will determine if it will terminate randomly with a 20 percent chance or random termination. This can only occur after the process has ran for 1 simulated second. If the process does not terminate then it will request resources from oss by sending it a message through the message queue and waiting. If the process has fulfilled all of the resources it has requested then it will terminate. When a process requests resourcs the oss process will recoginize which process is requesting resources. It will then run the deadlock detection algorithm to see if the user process can safely allocate the resources it is requesting. If it cannot safely allocate then it will send a message back to the user process letting it know it can safely allocate resources. The deadlock algorithm I have used was obtained from geeksforgeeks.com the algorithm is:

1. Let Work and Finish be vectors of length m and n respectively. Initialize Work= Available. For i=0, 1, â€¦., n-1, if Requesti = 0, then Finish[i] = true; otherwise, Finish[i]= false.
2. Find an index i such that both
	a) Finish[i] == false
	b) Requesti <= Work
3. If no such i exists go to step 4.
	Work= Work+ Allocationi
	Finish[i]= true
	Go to Step 2.
4. If Finish[i]== false for some i, 0<=i<n, then the system is in a deadlocked state. Moreover, if Finish[i]==false the process Pi is deadlocked. 

When a deadlock state is found oss finds the process that is using the most resources and signals to kill it putting back the most resources into an array of all the available resources. The deadlock algorithm is ran again in a loop killing processes until a safe state is found. The program will terminate when 100 processes is ran and will provide statistics on the program as it runs. 

PROBLEMS: This program caused a ton of issues because we are dealing with so many arrays and matrices when it comes to the resource managment. I had a lot of issues in the begining with how I was handling the resources, creating a working deadlock algorithm and making sure the program ran all the way through as a whole. I decided to change a few things in order to get the best output.

THINGS I CHANGED: 
1. I changed the amount of instances of each resource in order to get more concurrent processes in the system before they get killed from the deadlock prevention. Essentially using only 10 instances of each resource would distribute to about 3 processes before 1 or 2 of them need to be terminated due to deadlock from lack of resources. This provided for very unfulfilling output data. Using 20 instances of each resource now allows many more processes into the system before it starts deadlocking providing better allocation matrices. 

2. I changed the amount of times the allocation matrix will be displayed. The program averages around 40 - 50 grants per run so I changed the times you will see the allocation matrix from every 20 resource grants to every 10. This way if for some reason a bunch of processes got removed before it displays you will have a better opportunity to see the allocation matrix more times. 

SUMMARY: Overall this project was incredibly difficult and took me over 40-50 hours of coding, reworking, debugging, and refactoring before I could get everything tuned perfectly to make a perfect run through every time with a clean output. 
