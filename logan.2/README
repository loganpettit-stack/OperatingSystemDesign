Author: Logan Pettit
Description: This project will take in user provided command line arguments to determine if a series of numbers is prime or not. The main process will a number of child processes equal to the amount of numbers you want to check for primality. The child process will determine if the number is prime and return that number to the main process by placing it in shared memory. If the child process takes to long during its computations it will terminate itself based on a simulated clock time. If the parent process takes longer than 2 seconds of real time it will terminate itself. The end data will be output to a specified file that will be by default named output.log.

HOW TO RUN: The make file will compile the .c files into .o files and produce the needed executables for you to execute the program. All the user needs to do is run make, then run ./oss to run the program with its defaults. If you would like to change the defaults run ./oss -h in order to see the ways you can change the behavior of the program. 

GIT LOG: The log for the git commits are stored in git log

ISSUES: One of the major issues I had with the project is getting the processes to consitently run with expected behavior. The processes execute the child programs so quickly it is very hard to track what is going on. A lot of trial and error was required to get the processes to preform consistently. Another issue is the nature of requirements. If the child process does not determine if the number is prime in its alotted time then it will place -1 in its allocated spot in the shared memory array. This becomes an issue when trying to determine if 1 is prime. 1 is not prime so it will also place -1 in the array. To take care of this, I check the original numbers we are checking to see if 1 is going to be checked. If 1 is going to be checked then the child process spawns and checks 1 and places -1 in that spot. The main process then comes back and replaces that spot with 0, a number that is also not prime but can be checked, those numbers are then placed into the non prime array used for output. This takes care of the 0 and 1 issue for determining if they are prime since we also cannot place '-0' in the array to show it is not prime. 
